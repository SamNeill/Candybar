apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return !version.contains("SNAPSHOT")
}

def getRepositoryUsername() {
    return findProperty('GITHUB_ACTOR') ?: System.getenv('GITHUB_ACTOR')
}

def getRepositoryPassword() {
    return findProperty('GITHUB_TOKEN') ?: System.getenv('GITHUB_TOKEN')
}

def getReleaseRepositoryUrl() {
    def repoOwner = findProperty('GITHUB_REPOSITORY_OWNER') ?: System.getenv('GITHUB_REPOSITORY_OWNER') ?: developerOrganization
    def repoName = findProperty('GITHUB_REPOSITORY') ? findProperty('GITHUB_REPOSITORY').split('/')[1] : System.getenv('GITHUB_REPOSITORY') ? System.getenv('GITHUB_REPOSITORY').split('/')[1] : repoName
    return "https://maven.pkg.github.com/${repoOwner}/${repoName}"
}

def getSnapshotRepositoryUrl() {
    return getReleaseRepositoryUrl()
}

afterEvaluate { project ->
    publishing {
        publications {
            release(MavenPublication) {
                groupId = findProperty('GROUP') ?: libGroup
                artifactId = findProperty('ARTIFACT_ID') ?: libArtifactId
                version = findProperty('VERSION_NAME') ?: libVersion

                if (project.plugins.hasPlugin('com.android.library')) {
                    from components.release
                }

                pom {
                    name = findProperty('POM_NAME') ?: libArtifactId
                    description = findProperty('POM_DESCRIPTION') ?: libDescription
                    url = findProperty('POM_URL') ?: repoUrl

                    licenses {
                        license {
                            name = findProperty('POM_LICENSE_NAME') ?: libLicenseDesc
                            url = findProperty('POM_LICENSE_URL') ?: libLicenseUrl
                        }
                    }

                    developers {
                        developer {
                            id = findProperty('POM_DEVELOPER_ID') ?: developerOrganization
                            name = findProperty('POM_DEVELOPER_NAME') ?: developerName
                            email = findProperty('POM_DEVELOPER_EMAIL') ?: developerEmail
                            organization = findProperty('POM_DEVELOPER_ORGANIZATION') ?: developerOrganization
                            organizationUrl = findProperty('POM_DEVELOPER_ORGANIZATION_URL') ?: developerOrganizationUrl
                        }
                    }

                    scm {
                        connection = findProperty('POM_SCM_CONNECTION') ?: scmConnection
                        developerConnection = findProperty('POM_SCM_DEV_CONNECTION') ?: scmDevConnection
                        url = findProperty('POM_SCM_URL') ?: scmUrl
                    }
                }
            }
        }

        repositories {
            maven {
                name = "GitHubPackages"
                url = uri(isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl())
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.release
    }
} 